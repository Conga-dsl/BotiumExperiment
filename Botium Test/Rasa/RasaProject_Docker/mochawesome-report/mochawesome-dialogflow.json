{
  "stats": {
    "suites": 1,
    "tests": 292,
    "passes": 40,
    "pending": 0,
    "failures": 252,
    "start": "2022-07-19T11:25:03.984Z",
    "end": "2022-07-19T11:29:45.720Z",
    "duration": 281736,
    "testsRegistered": 292,
    "passPercent": 13.698630136986301,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fb2c1fa0-667f-4ea0-a4dd-dfbf8ae64540",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
          "title": "Botium Test-Suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"before all\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 32,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver.Build()\n  .then((container) => {\n    suite.container = container\n    done()\n  })\n  .catch(done)",
              "err": {},
              "uuid": "c20bd9b8-6f64-4c7d-b688-02a6cc783b89",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"before each\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Start().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "fcf79708-d16c-4a82-8147-8e30c59a7ce2",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"after all\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Clean().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "44f162b7-fe53-4fd0-8268-e5dca560fc01",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"after each\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Stop().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "f2c1f0f8-f478-4f9b-8d7f-3754829302fb",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Convos/check_positions_path.convo.txt.p1/job_status-L1",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p1/job_status-L1",
              "timedOut": false,
              "duration": 518,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, my name is Ali. I applied for a job and would like to know when I'll hear back.\\n#bot: Hi Ali! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ec95fd89-b372-4bde-9514-00eedd2b5661",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p1/job_status-L2",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p1/job_status-L2",
              "timedOut": false,
              "duration": 396,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hey i am Ali, i applied for a job and would like to check my application.\\n#bot: Hi Ali! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "03a74d6a-7026-41db-af7c-043340c3e27c",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p1/job_status-L3",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p1/job_status-L3",
              "timedOut": false,
              "duration": 424,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, i am Ali. I applied for a job and would like to know when I'll hear back.\\n#bot: Hi Ali! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "19491d12-355e-4a82-9c35-a169e28bdeb3",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p1/job_status-L4",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p1/job_status-L4",
              "timedOut": false,
              "duration": 423,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, I'm Ali. I would like to check the status of my application.\\n#bot: Hi Ali! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ced6de95-8325-4d8f-8239-f7b2fb694775",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p1/job_status-L5",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p1/job_status-L5",
              "timedOut": false,
              "duration": 415,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, my name is Ali. I want to know my application status.\\n#bot: Hi Ali! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d9331eb8-a273-4ff0-9610-68ec14a6101d",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p1/job_status-L6",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p1/job_status-L6",
              "timedOut": false,
              "duration": 485,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, my name is Ali. I applied for a job and would like to know when I'll hear back.\\n#bot: Hi Ali! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "be865d45-d005-4f50-8843-40dc0bb08444",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p2/job_status-L1",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p2/job_status-L1",
              "timedOut": false,
              "duration": 439,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, my name is Sebastian. I applied for a job and would like to know when I'll hear back.\\n#bot: Hi Sebastian! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f3539fc4-b814-40b3-8301-bcf0e22a9f86",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p2/job_status-L2",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p2/job_status-L2",
              "timedOut": false,
              "duration": 467,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hey i am Sebastian, i applied for a job and would like to check my application.\\n#bot: Hi Sebastian! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4b947db1-ffe5-4545-8e0b-53f15b9c5491",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p2/job_status-L3",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p2/job_status-L3",
              "timedOut": false,
              "duration": 378,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, i am Sebastian. I applied for a job and would like to know when I'll hear back.\\n#bot: Hi Sebastian! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7f2d28ea-5284-4a1b-82ea-aaa218604828",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p2/job_status-L4",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p2/job_status-L4",
              "timedOut": false,
              "duration": 364,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, I'm Sebastian. I would like to check the status of my application.\\n#bot: Hi Sebastian! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "539162ec-c9cc-4451-922c-ff8aa1615402",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p2/job_status-L5",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p2/job_status-L5",
              "timedOut": false,
              "duration": 340,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, my name is Sebastian. I want to know my application status.\\n#bot: Hi Sebastian! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "41a5d40c-a7c1-4503-9aaa-d133ea4d324f",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p2/job_status-L6",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p2/job_status-L6",
              "timedOut": false,
              "duration": 374,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, my name is Sebastian. I applied for a job and would like to know when I'll hear back.\\n#bot: Hi Sebastian! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "5bc132d3-4f66-412c-aceb-a33945c079da",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p3/job_status-L1",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p3/job_status-L1",
              "timedOut": false,
              "duration": 422,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, my name is Michal. I applied for a job and would like to know when I'll hear back.\\n#bot: Hi Michal! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2631c2f9-33b0-4df9-b8fc-303da9e62976",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p3/job_status-L2",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p3/job_status-L2",
              "timedOut": false,
              "duration": 351,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hey i am Michal, i applied for a job and would like to check my application.\\n#bot: Hi Michal! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bf82e874-9186-4d1f-a78b-2335510224b7",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p3/job_status-L3",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p3/job_status-L3",
              "timedOut": false,
              "duration": 377,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, i am Michal. I applied for a job and would like to know when I'll hear back.\\n#bot: Hi Michal! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d6691f94-b032-4ab8-8e1a-917ccd5a29e8",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p3/job_status-L4",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p3/job_status-L4",
              "timedOut": false,
              "duration": 441,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, I'm Michal. I would like to check the status of my application.\\n#bot: Hi Michal! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3b3370aa-0ae5-436e-82e6-9c38b35cffc6",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p3/job_status-L5",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p3/job_status-L5",
              "timedOut": false,
              "duration": 355,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, my name is Michal. I want to know my application status.\\n#bot: Hi Michal! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fba89636-5233-4bde-8ecb-0f0fc74f0603",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p3/job_status-L6",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p3/job_status-L6",
              "timedOut": false,
              "duration": 350,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, my name is Michal. I applied for a job and would like to know when I'll hear back.\\n#bot: Hi Michal! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7c1e3031-ee42-462a-bb14-f17751ee8007",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p4/job_status-L1",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p4/job_status-L1",
              "timedOut": false,
              "duration": 365,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, my name is Kristian. I applied for a job and would like to know when I'll hear back.\\n#bot: Hi Kristian! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "af94a389-c8fe-49f5-bc2a-c83d12d40255",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p4/job_status-L2",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p4/job_status-L2",
              "timedOut": false,
              "duration": 410,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hey i am Kristian, i applied for a job and would like to check my application.\\n#bot: Hi Kristian! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "fa33e890-d987-48e1-836e-a413c21b0026",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p4/job_status-L3",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p4/job_status-L3",
              "timedOut": false,
              "duration": 377,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, i am Kristian. I applied for a job and would like to know when I'll hear back.\\n#bot: Hi Kristian! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "0281b877-e55b-4019-8b93-4e1ccdd55df5",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p4/job_status-L4",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p4/job_status-L4",
              "timedOut": false,
              "duration": 477,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, I'm Kristian. I would like to check the status of my application.\\n#bot: Hi Kristian! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cefddc35-8142-4fdb-abb0-996b8993cdd8",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p4/job_status-L5",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p4/job_status-L5",
              "timedOut": false,
              "duration": 391,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, my name is Kristian. I want to know my application status.\\n#bot: Hi Kristian! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "d114b7fa-78ef-4469-b328-04e47bf90024",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p4/job_status-L6",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p4/job_status-L6",
              "timedOut": false,
              "duration": 412,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, my name is Kristian. I applied for a job and would like to know when I'll hear back.\\n#bot: Hi Kristian! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "7cc44533-4f0d-4df7-9a95-9f80137d66d5",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p5/job_status-L1",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p5/job_status-L1",
              "timedOut": false,
              "duration": 412,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, my name is William. I applied for a job and would like to know when I'll hear back.\\n#bot: Hi William! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ae7b2175-0305-4162-a08b-e49e885d2168",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p5/job_status-L2",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p5/job_status-L2",
              "timedOut": false,
              "duration": 369,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hey i am William, i applied for a job and would like to check my application.\\n#bot: Hi William! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "98d3194b-9771-4ac6-986a-bf5a96bb27fa",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p5/job_status-L3",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p5/job_status-L3",
              "timedOut": false,
              "duration": 416,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, i am William. I applied for a job and would like to know when I'll hear back.\\n#bot: Hi William! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "53be9258-12fa-4ea6-ad95-5e68344dba02",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p5/job_status-L4",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p5/job_status-L4",
              "timedOut": false,
              "duration": 412,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, I'm William. I would like to check the status of my application.\\n#bot: Hi William! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "515aaf45-330a-4c66-bbb5-d15e3c8f11d7",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p5/job_status-L5",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p5/job_status-L5",
              "timedOut": false,
              "duration": 379,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, my name is William. I want to know my application status.\\n#bot: Hi William! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "a9109b71-8ff8-4f0d-a66c-3edb34fbc46a",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p5/job_status-L6",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p5/job_status-L6",
              "timedOut": false,
              "duration": 442,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, my name is William. I applied for a job and would like to know when I'll hear back.\\n#bot: Hi William! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b25b2b0f-1e03-4bbc-893a-1f39f54e4ea0",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p6/job_status-L1",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p6/job_status-L1",
              "timedOut": false,
              "duration": 407,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, my name is Chris. I applied for a job and would like to know when I'll hear back.\\n#bot: Hi Chris! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "00193976-627d-4623-aa1d-68e39fa97a99",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p6/job_status-L2",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p6/job_status-L2",
              "timedOut": false,
              "duration": 479,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hey i am Chris, i applied for a job and would like to check my application.\\n#bot: Hi Chris! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "83eaa53b-486e-4758-b420-8020de81f06c",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p6/job_status-L3",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p6/job_status-L3",
              "timedOut": false,
              "duration": 428,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, i am Chris. I applied for a job and would like to know when I'll hear back.\\n#bot: Hi Chris! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3264d20c-3478-4b39-b17f-c3d114ec4456",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p6/job_status-L4",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p6/job_status-L4",
              "timedOut": false,
              "duration": 430,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, I'm Chris. I would like to check the status of my application.\\n#bot: Hi Chris! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bbc8cfa0-d4d0-4186-b67f-6d2179fe5787",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p6/job_status-L5",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p6/job_status-L5",
              "timedOut": false,
              "duration": 401,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, my name is Chris. I want to know my application status.\\n#bot: Hi Chris! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3b04983e-7b53-4e90-91cd-ad8559e11087",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/check_positions_path.convo.txt.p6/job_status-L6",
              "fullTitle": "Botium Test-Suite Convos/check_positions_path.convo.txt.p6/job_status-L6",
              "timedOut": false,
              "duration": 378,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: - Hi, my name is Chris. I applied for a job and would like to know when I'll hear back.\\n#bot: Hi Chris! Let me check that for you\\n#bot: Yes, your application has been status.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4e7e8aef-6880-489e-82a0-a1bbfe628e92",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/default_fallback.convo.txt/bot_challenge-L1",
              "fullTitle": "Botium Test-Suite Convos/default_fallback.convo.txt/bot_challenge-L1",
              "timedOut": false,
              "duration": 376,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: are you a bot?\\n#bot: sorry i didn't understand, please ask me again!\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b2054dc8-36a1-4091-9906-841d43fe7928",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/default_fallback.convo.txt/bot_challenge-L2",
              "fullTitle": "Botium Test-Suite Convos/default_fallback.convo.txt/bot_challenge-L2",
              "timedOut": false,
              "duration": 468,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: are you a human?\\n#bot: sorry i didn't understand, please ask me again!\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "89202fa4-9b06-4d5d-b7ff-82a884647004",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/default_fallback.convo.txt/bot_challenge-L3",
              "fullTitle": "Botium Test-Suite Convos/default_fallback.convo.txt/bot_challenge-L3",
              "timedOut": false,
              "duration": 428,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: am I talking to a bot?\\n#bot: sorry i didn't understand, please ask me again!\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "901160d4-4865-4df3-a21b-79b7dc1bff41",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/default_fallback.convo.txt/bot_challenge-L4",
              "fullTitle": "Botium Test-Suite Convos/default_fallback.convo.txt/bot_challenge-L4",
              "timedOut": false,
              "duration": 459,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: am I talking to a human?\\n#bot: sorry i didn't understand, please ask me again!\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9571230f-59fc-4b06-820b-f9192415ad73",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L1/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L1/role-L1",
              "timedOut": false,
              "duration": 1068,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "e7c756c7-91a9-492b-b17f-ba606d0c4ce7",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L1/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L1/role-L2",
              "timedOut": false,
              "duration": 993,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "78514f09-5dcb-4691-a6bc-8ebf1c34fdb7",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L1/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L1/role-L3",
              "timedOut": false,
              "duration": 1010,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "9ea7d8a6-216b-4b8c-991a-9ac167375f31",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L2/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L2/role-L1",
              "timedOut": false,
              "duration": 1032,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "e1d9162a-fe8a-431e-80df-407f0935a199",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L2/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L2/role-L2",
              "timedOut": false,
              "duration": 996,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "ab740db3-76bb-4c16-898e-73e7a22c45eb",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L2/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L2/role-L3",
              "timedOut": false,
              "duration": 964,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "1cc5443d-cee9-40c4-a830-672dbfb36e1b",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L3/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L3/role-L1",
              "timedOut": false,
              "duration": 1015,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "51b81561-caba-4f56-84c4-97b1c948601b",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L3/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L3/role-L2",
              "timedOut": false,
              "duration": 1035,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "2e71879d-43cd-47ee-be38-b2cc60e512b5",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L3/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L3/role-L3",
              "timedOut": false,
              "duration": 960,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "63ecfb54-f381-4ee1-bf11-bb2104cf76e7",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L4/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L4/role-L1",
              "timedOut": false,
              "duration": 1024,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "d28666e3-ca5c-4ea1-98f6-84052001d521",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L4/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L4/role-L2",
              "timedOut": false,
              "duration": 1004,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "f5b480f1-38c5-4558-b5e9-9b33ecd0af9a",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L4/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L4/role-L3",
              "timedOut": false,
              "duration": 1100,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "83c9be9e-f787-42fa-8dbd-c2357351b26a",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L5/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L5/role-L1",
              "timedOut": false,
              "duration": 949,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "4c49469f-c113-4e64-9c54-768427c195df",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L5/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L5/role-L2",
              "timedOut": false,
              "duration": 1032,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "015cff24-61b0-49ab-a60c-e70fabc287d3",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L5/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L5/role-L3",
              "timedOut": false,
              "duration": 1034,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "af6084ad-26bb-4034-82fd-f2df28b526c5",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L6/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L6/role-L1",
              "timedOut": false,
              "duration": 1007,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "71ff1c09-db9c-4903-ad6f-70cb7efbfaed",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L6/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L6/role-L2",
              "timedOut": false,
              "duration": 984,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "ac089aa4-cdb8-4269-8c50-0efb58ce4cd0",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L6/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L6/role-L3",
              "timedOut": false,
              "duration": 1160,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "07e91ddd-3e16-4d6a-b265-77871bbf7cef",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L7/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L7/role-L1",
              "timedOut": false,
              "duration": 1105,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "ab25dd3d-a77d-441d-9b5e-1e81f6fa337e",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L7/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L7/role-L2",
              "timedOut": false,
              "duration": 908,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "3dbdd6d3-0bca-43bb-9dd8-e17424e4dc84",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L7/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L7/role-L3",
              "timedOut": false,
              "duration": 991,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L1/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "a29fe426-1dcd-43af-a2bc-fcde8e724c4d",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L1/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L1/role-L1",
              "timedOut": false,
              "duration": 1253,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "499a1624-a9b3-4f6f-b86f-3098a2481223",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L1/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L1/role-L2",
              "timedOut": false,
              "duration": 939,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "345c8421-a6eb-4f54-b41c-da413e036ab5",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L1/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L1/role-L3",
              "timedOut": false,
              "duration": 1048,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "762a0618-4b37-4c78-90d9-eff9a403077f",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L2/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L2/role-L1",
              "timedOut": false,
              "duration": 943,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "f6013ef3-b668-48a9-90f5-e6ca89dfbe81",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L2/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L2/role-L2",
              "timedOut": false,
              "duration": 1090,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "28dd3347-992a-47ec-bcae-8e89eb826b1e",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L2/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L2/role-L3",
              "timedOut": false,
              "duration": 940,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "406d9295-45cf-46b4-bbd8-d9192d56f8a7",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L3/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L3/role-L1",
              "timedOut": false,
              "duration": 1001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "430a2e33-3f17-40e1-b8fb-156e9b706bd8",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L3/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L3/role-L2",
              "timedOut": false,
              "duration": 1027,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "97f8fa2a-c40c-4b9c-aeb7-9d1b39dfd7f4",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L3/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L3/role-L3",
              "timedOut": false,
              "duration": 984,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "e6aeb6d6-3611-4628-842f-c760f1c8a29e",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L4/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L4/role-L1",
              "timedOut": false,
              "duration": 1041,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "83e313a9-4f42-4f97-aa12-742d40ccbdd0",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L4/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L4/role-L2",
              "timedOut": false,
              "duration": 1107,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "6e3081dc-434a-4fc4-81b8-307bcdce9ee5",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L4/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L4/role-L3",
              "timedOut": false,
              "duration": 950,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "e945df2a-4162-4ac6-bb22-efc3ee3f580c",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L5/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L5/role-L1",
              "timedOut": false,
              "duration": 1027,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "4c85a4e0-16ba-4452-b87e-00659c841a80",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L5/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L5/role-L2",
              "timedOut": false,
              "duration": 1018,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "57195c5a-3a33-4a5b-a963-7ef2e2a97a55",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L5/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L5/role-L3",
              "timedOut": false,
              "duration": 1014,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "40376571-71a8-4ed6-ae49-ba7f788578eb",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L6/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L6/role-L1",
              "timedOut": false,
              "duration": 953,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "7260e935-9b9d-4f14-8802-f324f09c151f",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L6/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L6/role-L2",
              "timedOut": false,
              "duration": 1158,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "1d9590cb-caf0-4b83-b0d7-e519a06cf6cb",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L6/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L6/role-L3",
              "timedOut": false,
              "duration": 1144,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "fc4e1215-ffaf-495b-b6ac-053a0c3cc911",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L7/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L7/role-L1",
              "timedOut": false,
              "duration": 1058,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "fe1ce2ef-664b-41c8-8c83-62bf741b151a",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L7/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L7/role-L2",
              "timedOut": false,
              "duration": 1143,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "8b4d05e0-6ac1-4238-9ca0-380473651273",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L7/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L7/role-L3",
              "timedOut": false,
              "duration": 961,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L2/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "7cd3c796-67e2-4f42-863c-06fad5353617",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L1/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L1/role-L1",
              "timedOut": false,
              "duration": 1009,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "19b163e9-3286-42cc-a699-333dd774de28",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L1/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L1/role-L2",
              "timedOut": false,
              "duration": 1036,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "ca02ae18-37fa-4046-9cef-1f94375f35a6",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L1/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L1/role-L3",
              "timedOut": false,
              "duration": 998,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "0427e89b-b729-4feb-9d0d-130133672c39",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L2/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L2/role-L1",
              "timedOut": false,
              "duration": 1021,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "b400cb2a-b714-40e0-9c24-593e74e46d31",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L2/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L2/role-L2",
              "timedOut": false,
              "duration": 1001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "b352e62c-73a3-4cb8-a36b-00bde790b2ae",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L2/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L2/role-L3",
              "timedOut": false,
              "duration": 957,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "20c55b87-8b9d-4aa2-9a62-c5a5e5df6c51",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L3/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L3/role-L1",
              "timedOut": false,
              "duration": 1128,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "63e71088-352f-4d7a-9ce9-7a8af50ca5a0",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L3/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L3/role-L2",
              "timedOut": false,
              "duration": 1005,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "e7101fb8-a7a0-47e4-96d1-325e1e2c6cad",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L3/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L3/role-L3",
              "timedOut": false,
              "duration": 981,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "18193c7c-b244-46c4-80e7-8b71a5f65381",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L4/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L4/role-L1",
              "timedOut": false,
              "duration": 1001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "748ad14c-1825-4a15-93fc-b633d0920b29",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L4/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L4/role-L2",
              "timedOut": false,
              "duration": 1177,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "0c2249a6-0a3a-4f80-8f7a-b156927ba2a1",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L4/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L4/role-L3",
              "timedOut": false,
              "duration": 923,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "3532d15c-eb99-47ca-b87b-e2cbb234971d",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L5/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L5/role-L1",
              "timedOut": false,
              "duration": 1044,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "9941076d-0c28-4e6a-855e-cf4c3a8701ef",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L5/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L5/role-L2",
              "timedOut": false,
              "duration": 1004,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "12215c9c-2678-4805-9a56-dc7ea02f74f7",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L5/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L5/role-L3",
              "timedOut": false,
              "duration": 979,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "b229b036-d173-446a-8185-57f00d336461",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L6/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L6/role-L1",
              "timedOut": false,
              "duration": 1037,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "7514105c-6e6d-4315-a182-51151887f1a7",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L6/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L6/role-L2",
              "timedOut": false,
              "duration": 1009,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "942ba789-d3b5-4adc-966e-ac47cb45d781",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L6/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L6/role-L3",
              "timedOut": false,
              "duration": 1010,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "07853d0d-e5e9-4b57-a512-5f8420da49b4",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L7/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L7/role-L1",
              "timedOut": false,
              "duration": 983,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "dd095e7d-09fa-4b4d-9f4d-ebf8d16b79b5",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L7/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L7/role-L2",
              "timedOut": false,
              "duration": 985,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "67298594-1b16-4f6d-8def-3e1b254f9c5b",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L7/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L7/role-L3",
              "timedOut": false,
              "duration": 1003,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L3/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "dc074ec2-d79a-43ef-9a3a-6cbdf624f398",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L1/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L1/role-L1",
              "timedOut": false,
              "duration": 1026,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "07775d70-7677-47c3-a64d-5e007f0c1ff3",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L1/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L1/role-L2",
              "timedOut": false,
              "duration": 991,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "5489acaf-77a5-444b-9057-06dacb10748c",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L1/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L1/role-L3",
              "timedOut": false,
              "duration": 1010,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "916e3971-0442-4c89-a40b-38e6f43afcc4",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L2/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L2/role-L1",
              "timedOut": false,
              "duration": 1038,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "15348012-a6a1-43e4-84ad-d62820785d4c",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L2/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L2/role-L2",
              "timedOut": false,
              "duration": 978,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "1a2e13de-9b67-423c-9022-c5bc7ea569d7",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L2/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L2/role-L3",
              "timedOut": false,
              "duration": 1012,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "62801083-b8a3-48a9-83d8-2cf129d4bb5a",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L3/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L3/role-L1",
              "timedOut": false,
              "duration": 1225,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "9912cf82-5f56-4f36-a0be-b696bf15eb2e",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L3/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L3/role-L2",
              "timedOut": false,
              "duration": 898,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "ff6db0fc-16b4-4c1d-a61a-5bb6ea491786",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L3/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L3/role-L3",
              "timedOut": false,
              "duration": 1076,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "91df5283-38e8-40d2-97f9-3dde22f9d504",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L4/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L4/role-L1",
              "timedOut": false,
              "duration": 1031,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "14f71afe-4e9d-4b02-a773-dfb9cba134af",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L4/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L4/role-L2",
              "timedOut": false,
              "duration": 1109,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "7823842a-6cc4-428d-9851-2efd06bed69c",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L4/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L4/role-L3",
              "timedOut": false,
              "duration": 970,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "6786d5f9-6241-4e17-90de-cb716d965e9c",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L5/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L5/role-L1",
              "timedOut": false,
              "duration": 1180,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "ce9385bc-4e7d-4a25-8123-6644b66d082d",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L5/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L5/role-L2",
              "timedOut": false,
              "duration": 911,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "e65b7b32-e982-4566-8381-0ccac6345115",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L5/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L5/role-L3",
              "timedOut": false,
              "duration": 1027,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "84f2f7dc-54d9-4fbe-abc0-32ab435c6e8b",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L6/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L6/role-L1",
              "timedOut": false,
              "duration": 989,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "c044b6f4-533e-4f8c-b461-fdb8a10620be",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L6/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L6/role-L2",
              "timedOut": false,
              "duration": 1045,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "4feb2913-48af-4899-91e5-4794e485b8d1",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L6/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L6/role-L3",
              "timedOut": false,
              "duration": 1022,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "a7e64164-7b75-4925-b4ed-c767bca8ad06",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L7/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L7/role-L1",
              "timedOut": false,
              "duration": 1012,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "d73d19d1-e961-4345-a4e4-a277407f5b45",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L7/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L7/role-L2",
              "timedOut": false,
              "duration": 1132,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "cddfa9a2-7220-49b6-99d9-4b4c97735432",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L7/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L7/role-L3",
              "timedOut": false,
              "duration": 996,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L4/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "24c381ed-1e8c-4c2e-8f9a-1526ebaf5dd7",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L1/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L1/role-L1",
              "timedOut": false,
              "duration": 1049,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "1afebc27-5103-4ed8-8f44-fccdd3f4611d",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L1/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L1/role-L2",
              "timedOut": false,
              "duration": 982,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "b08a2e34-3499-43e1-807b-df25d885e751",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L1/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L1/role-L3",
              "timedOut": false,
              "duration": 1067,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "d3e3f5d5-20df-4a2f-985d-8cde8585e3ab",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L2/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L2/role-L1",
              "timedOut": false,
              "duration": 985,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "c4a33284-1092-4bc1-9a54-066a34095e41",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L2/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L2/role-L2",
              "timedOut": false,
              "duration": 998,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "38054e57-91b1-4125-86d4-718915605fe8",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L2/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L2/role-L3",
              "timedOut": false,
              "duration": 1031,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "959002b7-38f2-4330-9783-54b206b55bc1",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L3/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L3/role-L1",
              "timedOut": false,
              "duration": 974,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "258bcd32-3250-480f-98fe-2ad8b0018058",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L3/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L3/role-L2",
              "timedOut": false,
              "duration": 1145,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "891d8c57-a248-4b37-af65-bff134822ed5",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L3/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L3/role-L3",
              "timedOut": false,
              "duration": 939,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "0ee17c74-0b62-4cb2-b20f-b240dff7c403",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L4/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L4/role-L1",
              "timedOut": false,
              "duration": 1066,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "8dd1092e-2d95-4519-aebd-652557bacfbc",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L4/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L4/role-L2",
              "timedOut": false,
              "duration": 985,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "4e47b6e0-10b0-407a-86aa-f9cd3ef1b491",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L4/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L4/role-L3",
              "timedOut": false,
              "duration": 968,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "7d123942-58e6-4bfb-8606-cfbe05b6ceda",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L5/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L5/role-L1",
              "timedOut": false,
              "duration": 961,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "f8f58b36-9d12-4693-93dd-584514846a54",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L5/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L5/role-L2",
              "timedOut": false,
              "duration": 982,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "b38f31fd-823c-4ed5-808b-e69369486bd3",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L5/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L5/role-L3",
              "timedOut": false,
              "duration": 1030,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "9e45814e-3f10-4d73-a3a7-74c1a1e83423",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L6/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L6/role-L1",
              "timedOut": false,
              "duration": 1069,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "3d8bd803-3979-4dcf-8a59-d319ea019199",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L6/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L6/role-L2",
              "timedOut": false,
              "duration": 987,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "bd6ab7ba-ce79-49bd-b3df-0b3e8605fde4",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L6/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L6/role-L3",
              "timedOut": false,
              "duration": 960,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "df25fd83-1887-4e42-9e28-8869f5f57503",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L7/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L7/role-L1",
              "timedOut": false,
              "duration": 1034,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "82346b5b-689f-493c-9361-57a018d647b3",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L7/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L7/role-L2",
              "timedOut": false,
              "duration": 951,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "3ac2449f-7f89-4bd1-8824-5b150fbd37af",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L7/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L7/role-L3",
              "timedOut": false,
              "duration": 1052,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L5/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "b8885f16-9881-4034-8e9e-1a8056ee40c8",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L1/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L1/role-L1",
              "timedOut": false,
              "duration": 963,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "a40d9b0c-29d7-432b-a380-e3bb3cd72acf",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L1/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L1/role-L2",
              "timedOut": false,
              "duration": 988,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "5dc366a0-2173-460f-ba15-f9307c50a1b2",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L1/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L1/role-L3",
              "timedOut": false,
              "duration": 994,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "486fce9a-897d-4b75-8c14-581dc41f4abd",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L2/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L2/role-L1",
              "timedOut": false,
              "duration": 1088,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "3695080f-71b2-42ca-aab7-e4a85bfb0121",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L2/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L2/role-L2",
              "timedOut": false,
              "duration": 999,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "0633139d-0115-4f96-8d4e-f2c088b91a26",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L2/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L2/role-L3",
              "timedOut": false,
              "duration": 1216,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "5061a814-403b-4150-8932-814e9d0c5e75",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L3/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L3/role-L1",
              "timedOut": false,
              "duration": 898,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "a6a57b52-3c9c-4352-b894-68b9f16f7124",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L3/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L3/role-L2",
              "timedOut": false,
              "duration": 992,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "a91524ca-004f-407c-93ce-6943f22ab9ae",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L3/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L3/role-L3",
              "timedOut": false,
              "duration": 1076,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "3887b2e1-5ee7-451f-b74b-5c6a7d42ca6d",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L4/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L4/role-L1",
              "timedOut": false,
              "duration": 966,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "8949b3b3-d6c5-4dd7-9c38-7592f27e6f2f",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L4/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L4/role-L2",
              "timedOut": false,
              "duration": 1045,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "c6d1b328-94f4-41ba-a8e0-bdf0bf2f9687",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L4/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L4/role-L3",
              "timedOut": false,
              "duration": 1000,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "720c5e07-91d1-45d0-9832-39b39bb45613",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L5/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L5/role-L1",
              "timedOut": false,
              "duration": 999,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "28ee88e7-28dd-4634-9c65-aae6a5e7beed",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L5/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L5/role-L2",
              "timedOut": false,
              "duration": 971,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "daa8f9d1-9206-42c2-a017-eb11119b6990",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L5/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L5/role-L3",
              "timedOut": false,
              "duration": 1025,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "2bb66236-a55c-4dbd-aeee-74e28406cc93",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L6/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L6/role-L1",
              "timedOut": false,
              "duration": 984,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "4e83d396-ffcd-4dbb-9c22-111ca139e6ad",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L6/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L6/role-L2",
              "timedOut": false,
              "duration": 1010,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "38102119-f0a2-45fb-a889-eb0420017ca1",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L6/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L6/role-L3",
              "timedOut": false,
              "duration": 1186,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "9a1c6a91-0f9e-4731-8aa5-eaf2d169b664",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L7/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L7/role-L1",
              "timedOut": false,
              "duration": 1105,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "adf0761f-7dd7-458e-bd28-eeefe273abb5",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L7/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L7/role-L2",
              "timedOut": false,
              "duration": 1026,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "636ec4d8-2bee-4977-9cec-0f02cb2a8aff",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L7/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L7/role-L3",
              "timedOut": false,
              "duration": 961,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A technical one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role1/greet-L6/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A technical one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "fb4f3878-8e35-4cea-b2bb-9883e374fe1b",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L1/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L1/role-L1",
              "timedOut": false,
              "duration": 1037,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "9b7d53f8-a554-406e-bfe4-94a61a417ba0",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L1/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L1/role-L2",
              "timedOut": false,
              "duration": 1071,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "fc30b4c1-d08d-44c3-9f44-47759f1b384d",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L1/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L1/role-L3",
              "timedOut": false,
              "duration": 964,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "463a6258-b12f-4a25-9b2c-4c8956ef8ddb",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L2/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L2/role-L1",
              "timedOut": false,
              "duration": 1008,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "3e02c93d-23df-43c6-a9c0-fc8732a775e1",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L2/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L2/role-L2",
              "timedOut": false,
              "duration": 1038,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "9e2d1de0-f818-4919-b149-aed526e4ad5d",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L2/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L2/role-L3",
              "timedOut": false,
              "duration": 961,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "54b57b88-47c9-4b7d-8f63-63974b6da770",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L3/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L3/role-L1",
              "timedOut": false,
              "duration": 945,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "a00a9ff3-0d5a-4b3a-96d8-8b34cc95c670",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L3/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L3/role-L2",
              "timedOut": false,
              "duration": 1189,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "ff2b8be8-f55f-42e9-9b5d-1056920f195b",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L3/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L3/role-L3",
              "timedOut": false,
              "duration": 938,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "cb694e3a-6362-4d1e-810b-d6bbe6b1fda5",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L4/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L4/role-L1",
              "timedOut": false,
              "duration": 986,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "7effeec3-9ac3-40a5-8ace-331a8ea300ba",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L4/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L4/role-L2",
              "timedOut": false,
              "duration": 1170,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "63c49c89-2549-4fc2-84d1-80df25174afd",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L4/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L4/role-L3",
              "timedOut": false,
              "duration": 904,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "9ae5a410-42dc-4e68-b35c-c39848e04d22",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L5/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L5/role-L1",
              "timedOut": false,
              "duration": 1064,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "f07bbee2-7042-4c60-87b2-5a4c714ea770",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L5/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L5/role-L2",
              "timedOut": false,
              "duration": 1150,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "08a50b2a-d8b1-4097-b636-c74996253778",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L5/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L5/role-L3",
              "timedOut": false,
              "duration": 941,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "1463d7eb-5faa-4761-bea9-d11a277adc26",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L6/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L6/role-L1",
              "timedOut": false,
              "duration": 1218,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "2dd5673f-a465-44f8-a951-3e52846c9271",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L6/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L6/role-L2",
              "timedOut": false,
              "duration": 978,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "3f5d4525-142e-4eed-880c-28612abed66c",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L6/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L6/role-L3",
              "timedOut": false,
              "duration": 1010,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "b0448f18-227d-4e18-b1a2-f7fd5a1b56d3",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L7/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L7/role-L1",
              "timedOut": false,
              "duration": 976,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "db82a524-cfd8-45f6-bd5e-c5cdf416a8ee",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L7/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L7/role-L2",
              "timedOut": false,
              "duration": 1060,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "f69fc22c-c742-427e-a0a7-5b00826eb5c3",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L7/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L7/role-L3",
              "timedOut": false,
              "duration": 948,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L1/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "9d6e891e-7435-4b03-b79d-fed7a8f45ad4",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L1/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L1/role-L1",
              "timedOut": false,
              "duration": 1020,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "75483e77-8436-4f0e-aa1a-4d109ea6edd4",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L1/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L1/role-L2",
              "timedOut": false,
              "duration": 993,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "9e3a8558-4d1e-43a8-82c3-bcbe93a95c47",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L1/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L1/role-L3",
              "timedOut": false,
              "duration": 970,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "6a3f5c22-9964-4eff-990f-e0a2785a38eb",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L2/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L2/role-L1",
              "timedOut": false,
              "duration": 1065,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "7e92396b-ff25-45f8-be8f-e2923bacf9d5",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L2/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L2/role-L2",
              "timedOut": false,
              "duration": 1057,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "0131d7b1-7fe7-40fb-b5d8-a257cd496edc",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L2/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L2/role-L3",
              "timedOut": false,
              "duration": 963,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "2f6cdc99-e1d3-439a-bc5d-185bae470350",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L3/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L3/role-L1",
              "timedOut": false,
              "duration": 1004,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "cad11d76-9283-4068-baea-e96b678ce738",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L3/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L3/role-L2",
              "timedOut": false,
              "duration": 994,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "9b861ba3-072d-4a13-9033-811f7793f3f2",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L3/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L3/role-L3",
              "timedOut": false,
              "duration": 947,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "035c3f12-d84a-44e6-9be0-69a859b6f5e5",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L4/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L4/role-L1",
              "timedOut": false,
              "duration": 1009,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "7e449f61-f251-4b6f-a647-50feaced4748",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L4/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L4/role-L2",
              "timedOut": false,
              "duration": 1001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "aa4efa01-182e-4c58-af6e-d0ae93d641fb",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L4/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L4/role-L3",
              "timedOut": false,
              "duration": 1241,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "ac900537-4025-4811-9f72-160113f91a9d",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L5/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L5/role-L1",
              "timedOut": false,
              "duration": 1060,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "15e61a63-4014-44cb-b93c-983186d781ab",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L5/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L5/role-L2",
              "timedOut": false,
              "duration": 1137,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "ef62f65a-517f-41a2-bb6b-c2510d00c258",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L5/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L5/role-L3",
              "timedOut": false,
              "duration": 1015,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "a19b21b8-aab4-45b0-9d59-e415a5760145",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L6/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L6/role-L1",
              "timedOut": false,
              "duration": 984,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "b757d82c-c5de-40db-adfb-8edb1a202f1d",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L6/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L6/role-L2",
              "timedOut": false,
              "duration": 983,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "1c9cf8a8-53da-4f89-8364-acb0191c48d7",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L6/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L6/role-L3",
              "timedOut": false,
              "duration": 1026,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "04165b89-6db3-4782-ad34-9929f32660df",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L7/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L7/role-L1",
              "timedOut": false,
              "duration": 1002,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "31b75c53-35c2-4c64-a8cc-fa9227bf1486",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L7/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L7/role-L2",
              "timedOut": false,
              "duration": 1324,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "c8b9ea1c-2877-49cf-9289-e652c3dad10b",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L7/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L7/role-L3",
              "timedOut": false,
              "duration": 978,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L2/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "9a0c3bb2-5e2b-40ef-88a2-2370507303ff",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L1/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L1/role-L1",
              "timedOut": false,
              "duration": 1008,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "852d5d3e-97be-4dbd-992c-ca4092248425",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L1/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L1/role-L2",
              "timedOut": false,
              "duration": 945,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "cb622e29-e51f-4b39-bd0e-75502f35a86f",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L1/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L1/role-L3",
              "timedOut": false,
              "duration": 1009,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "daf7e4ff-7899-416d-b5fc-0076ce30d4fb",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L2/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L2/role-L1",
              "timedOut": false,
              "duration": 994,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "48b2d667-0e3f-4f1b-8ace-0ad6cb986d72",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L2/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L2/role-L2",
              "timedOut": false,
              "duration": 1060,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "da17deb4-b04e-4c70-a5b6-4886a41937c9",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L2/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L2/role-L3",
              "timedOut": false,
              "duration": 1024,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "2778a520-2a2c-42a6-b667-a778a5604c5e",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L3/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L3/role-L1",
              "timedOut": false,
              "duration": 1193,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "dc34a2bf-0251-4750-8c78-f9129da456b0",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L3/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L3/role-L2",
              "timedOut": false,
              "duration": 931,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "95fc03b6-e981-4ac6-b613-e9a39a5c1f1d",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L3/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L3/role-L3",
              "timedOut": false,
              "duration": 995,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "25bcd034-6241-4902-979c-12a0d3729ae2",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L4/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L4/role-L1",
              "timedOut": false,
              "duration": 1026,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "d1e838d1-7453-4f11-9824-27a62036046d",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L4/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L4/role-L2",
              "timedOut": false,
              "duration": 999,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "cb1fa688-524c-4c0d-a60d-ecdc4f7d9fbf",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L4/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L4/role-L3",
              "timedOut": false,
              "duration": 990,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "d77f4c16-ac36-4e3e-9492-f12bf91e0500",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L5/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L5/role-L1",
              "timedOut": false,
              "duration": 1125,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "672f1232-f30f-4bff-a3cd-d385df1eb383",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L5/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L5/role-L2",
              "timedOut": false,
              "duration": 972,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "df4ae534-9459-43fb-9d4d-1cc18b8c8e87",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L5/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L5/role-L3",
              "timedOut": false,
              "duration": 1179,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "bb218f22-977f-4804-a3b7-e59b8293b658",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L6/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L6/role-L1",
              "timedOut": false,
              "duration": 1141,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "dc6b1102-7380-41b2-ae41-d9df9aad2336",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L6/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L6/role-L2",
              "timedOut": false,
              "duration": 929,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "c33c5f12-9fb0-4ee8-8129-08abe10eef06",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L6/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L6/role-L3",
              "timedOut": false,
              "duration": 1014,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "c247fd00-9821-4158-8f01-b30959ed4f75",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L7/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L7/role-L1",
              "timedOut": false,
              "duration": 972,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "a267659e-cdd1-49ba-be5f-4dad76a2eb36",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L7/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L7/role-L2",
              "timedOut": false,
              "duration": 1039,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "9420fc9f-d172-4208-8c28-09349601ad84",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L7/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L7/role-L3",
              "timedOut": false,
              "duration": 1020,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L3/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "5b8d2996-efe1-49a2-b3a0-d5dc3505c488",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L1/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L1/role-L1",
              "timedOut": false,
              "duration": 962,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "b7a9a95a-17c0-41fd-94ce-97a84e47e490",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L1/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L1/role-L2",
              "timedOut": false,
              "duration": 1216,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "9fc3f101-b326-469e-8192-bf81f7a275d4",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L1/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L1/role-L3",
              "timedOut": false,
              "duration": 901,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "319cdab4-41ad-4a14-ab1b-a1e7e96debf4",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L2/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L2/role-L1",
              "timedOut": false,
              "duration": 990,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "0e37552d-5f1f-4ac8-b293-9d382bc69c05",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L2/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L2/role-L2",
              "timedOut": false,
              "duration": 1032,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "e7c9a201-2e5b-4167-b5e3-7157100c6168",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L2/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L2/role-L3",
              "timedOut": false,
              "duration": 1005,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "0efd2ee3-280e-48d0-8560-5790fe55a0ab",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L3/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L3/role-L1",
              "timedOut": false,
              "duration": 1125,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "31dca22e-a431-46aa-8f92-3714a0ec7205",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L3/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L3/role-L2",
              "timedOut": false,
              "duration": 918,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "d9410914-cb9a-4fd0-afac-49f51093a419",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L3/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L3/role-L3",
              "timedOut": false,
              "duration": 1022,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "5f203506-3a32-48d8-9206-2c1474e8efcc",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L4/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L4/role-L1",
              "timedOut": false,
              "duration": 991,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "e9756865-c0ac-4838-95d8-a9fd2880ffbc",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L4/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L4/role-L2",
              "timedOut": false,
              "duration": 1182,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "3111f96f-2158-44b8-a3df-f9acf67853de",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L4/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L4/role-L3",
              "timedOut": false,
              "duration": 1003,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "c4349945-042f-4617-b55c-97c9e898dec0",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L5/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L5/role-L1",
              "timedOut": false,
              "duration": 926,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "0c0c64a9-7405-45f9-97b1-d56b2ef894f6",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L5/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L5/role-L2",
              "timedOut": false,
              "duration": 1065,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "dba734d6-c191-4335-8032-fafa1ccfb537",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L5/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L5/role-L3",
              "timedOut": false,
              "duration": 1104,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "5102dcdc-9cfc-48fd-813e-2c15b2171c84",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L6/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L6/role-L1",
              "timedOut": false,
              "duration": 959,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "8b77223a-b8b5-4820-88bc-ef339b0dafa1",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L6/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L6/role-L2",
              "timedOut": false,
              "duration": 962,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "616ed0a8-ea24-4134-a714-ac91eb21d280",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L6/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L6/role-L3",
              "timedOut": false,
              "duration": 1042,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "ab629977-1e7e-4fcc-8a60-0652d1c9a080",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L7/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L7/role-L1",
              "timedOut": false,
              "duration": 1011,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "95818d1e-0a7e-45a2-95c6-8dfa1789faac",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L7/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L7/role-L2",
              "timedOut": false,
              "duration": 1003,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "7d1156d5-d93c-47e8-af97-18d9f3a07e3c",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L7/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L7/role-L3",
              "timedOut": false,
              "duration": 1103,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good morning\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L4/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good morning\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "515c8909-4807-4184-afb5-90015e7e9357",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L1/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L1/role-L1",
              "timedOut": false,
              "duration": 949,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "0c475043-7ee4-4b8d-a307-960878b231c5",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L1/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L1/role-L2",
              "timedOut": false,
              "duration": 1277,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "2ac01202-0c7e-4db3-a4f3-f96900008166",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L1/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L1/role-L3",
              "timedOut": false,
              "duration": 920,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "b33c2f93-334d-4dc8-aba2-9d1c403266e1",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L2/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L2/role-L1",
              "timedOut": false,
              "duration": 1050,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "6859787b-73e0-4edf-aefd-d758f7e16a54",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L2/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L2/role-L2",
              "timedOut": false,
              "duration": 943,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "456dbe16-c953-4e71-9705-5478e10e052c",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L2/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L2/role-L3",
              "timedOut": false,
              "duration": 1056,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "6ce83cf2-0d44-441a-af3f-2f94566c54f1",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L3/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L3/role-L1",
              "timedOut": false,
              "duration": 995,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "8ac067c2-dd63-4bdd-8ce4-047a68327c08",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L3/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L3/role-L2",
              "timedOut": false,
              "duration": 995,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "cb9d5926-1fd7-4f20-a8d7-193f3711b92c",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L3/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L3/role-L3",
              "timedOut": false,
              "duration": 993,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "4b4b8591-0ec1-46a7-818c-d0e7738fad5e",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L4/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L4/role-L1",
              "timedOut": false,
              "duration": 1006,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "7944a17f-f9a2-437a-b375-d89a3e9ba4bc",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L4/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L4/role-L2",
              "timedOut": false,
              "duration": 1023,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "b00eaa96-ad8f-4cb1-af25-81fbd5556f02",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L4/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L4/role-L3",
              "timedOut": false,
              "duration": 964,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "5900188f-cd18-4184-aa1a-6e3a36fa9b65",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L5/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L5/role-L1",
              "timedOut": false,
              "duration": 1023,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "55c40e73-5323-4ad6-a3c9-50243cfc4c77",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L5/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L5/role-L2",
              "timedOut": false,
              "duration": 974,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "193ef4e9-029e-4939-b81e-533854f9c456",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L5/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L5/role-L3",
              "timedOut": false,
              "duration": 1026,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "2a9dce72-daee-4bf1-b225-c66d79d06e88",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L6/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L6/role-L1",
              "timedOut": false,
              "duration": 1054,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "1d0aab52-cad1-43b6-8cf6-d169540afd71",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L6/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L6/role-L2",
              "timedOut": false,
              "duration": 1053,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "47d9f395-9be4-4595-b87a-7ad6dac9f691",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L6/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L6/role-L3",
              "timedOut": false,
              "duration": 972,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "8b451ce6-754a-4d09-91fd-9dac36766458",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L7/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L7/role-L1",
              "timedOut": false,
              "duration": 987,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "de1ab305-295e-4b68-9a15-1a2d8235dd14",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L7/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L7/role-L2",
              "timedOut": false,
              "duration": 980,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "33ad7a44-c222-4258-a711-59082e2524dd",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L7/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L7/role-L3",
              "timedOut": false,
              "duration": 989,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: good evening\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L5/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: good evening\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "f56576e6-2f71-4853-872e-08a37122b495",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L1/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L1/role-L1",
              "timedOut": false,
              "duration": 1295,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L1/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "3c7edbce-a02e-488b-ac34-e9a7c2da44ea",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L1/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L1/role-L2",
              "timedOut": false,
              "duration": 879,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L1/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "384d6b88-fdee-4724-95f6-404e99341e86",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L1/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L1/role-L3",
              "timedOut": false,
              "duration": 1019,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know which positions are open right now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L1/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know which positions are open right now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "32d2317b-ce7d-4dd4-9854-22540f5a262c",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L2/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L2/role-L1",
              "timedOut": false,
              "duration": 961,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L2/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "351e8c23-cf7a-4950-8028-e92996744848",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L2/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L2/role-L2",
              "timedOut": false,
              "duration": 1037,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L2/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "0055ae8b-2ff5-4ab1-8d2f-911690542679",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L2/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L2/role-L3",
              "timedOut": false,
              "duration": 992,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I want to know the available positions now.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L2/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I want to know the available positions now.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "60fcc258-9bc3-4ce7-af74-e50fb36dda95",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L3/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L3/role-L1",
              "timedOut": false,
              "duration": 1028,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L3/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "8e6859bf-bca2-4965-a405-f3ffda761b93",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L3/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L3/role-L2",
              "timedOut": false,
              "duration": 1002,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L3/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "b2f25f6c-590a-4b3b-b497-38c2904ec01b",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L3/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L3/role-L3",
              "timedOut": false,
              "duration": 1009,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the open positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L3/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the open positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "22301572-cd55-4300-9f21-8b9328448564",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L4/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L4/role-L1",
              "timedOut": false,
              "duration": 962,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L4/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "2356a208-6f7f-462d-a45e-9228432a1b97",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L4/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L4/role-L2",
              "timedOut": false,
              "duration": 1185,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L4/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "dbccee3a-cb2a-44f5-aedf-28e5cbc90008",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L4/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L4/role-L3",
              "timedOut": false,
              "duration": 1087,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I would like to know the available positions.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L4/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I would like to know the available positions.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "f0f91915-9223-4420-a1a9-a672ccbe65b8",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L5/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L5/role-L1",
              "timedOut": false,
              "duration": 890,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L5/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "d1ded24e-e31d-42f2-860a-8bf8f43d330d",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L5/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L5/role-L2",
              "timedOut": false,
              "duration": 1133,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L5/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "d938a403-ec47-42d4-b0ab-1b7f5bf03f19",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L5/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L5/role-L3",
              "timedOut": false,
              "duration": 934,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: Would you please write me the open positions at RASA\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L5/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: Would you please write me the open positions at RASA\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "ad927cc0-3ec5-4e82-9780-d240120ae76d",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L6/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L6/role-L1",
              "timedOut": false,
              "duration": 1119,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L6/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "6cdd5d63-35f9-44e2-996a-7dab35d64d70",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L6/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L6/role-L2",
              "timedOut": false,
              "duration": 923,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L6/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "450b4ccc-5c51-4bd3-8806-e27ab2d8635f",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L6/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L6/role-L3",
              "timedOut": false,
              "duration": 1024,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: I’d like to know what are the open positions now at RASA.\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L6/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: I’d like to know what are the open positions now at RASA.\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "c1eb8d98-fc13-4755-bfe7-cf1aa50397f4",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L7/role-L1",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L7/role-L1",
              "timedOut": false,
              "duration": 998,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L7/role-L1/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "183caf07-0779-4e3d-8468-4a13f192cc9e",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L7/role-L2",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L7/role-L2",
              "timedOut": false,
              "duration": 966,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A business position\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L7/role-L2/Line 16: Bot response (on Line 13: #me - A $role position) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role position\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business position\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "f4a15125-b0f3-4fa3-8777-8ee4a3a064fb",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L7/role-L3",
              "fullTitle": "Botium Test-Suite Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L7/role-L3",
              "timedOut": false,
              "duration": 971,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hey there\\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\\n#me: What are the available positions now?\\n#bot: Are you looking for a technical or a business role?\\n#me: A business one\\n#bot:\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:",
                "estack": "Error: Convos/open_positions_path.convo.txt.role2/greet-L6/open_position-L7/role-L3/Line 16: Bot response (on Line 13: #me - A $role one) <no response> expected to match one of \"machine learning engineer and ML product success engineer are the open positions\", \"There are no open positions\"\r\n########################################\r\nASSERTION FAILED in TextMatchAsserter - Expected: [\"machine learning engineer and ML product success engineer are the open positions\",\"There are no open positions\"]  - Actual: empty\r\nINPUT: A $role one\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hey there\r\n#bot: hi, I’m Rasa’s recruiting bot. How can I help?\r\n#me: What are the available positions now?\r\n#bot: Are you looking for a technical or a business role?\r\n#me: A business one\r\n#bot:\n    at wrapBotiumError (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:76:12)\n    at finish (C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:205:24)\n    at C:\\Users\\Usuario\\AppData\\Roaming\\npm\\node_modules\\botium-cli\\src\\run\\index.js:218:11",
                "diff": null
              },
              "uuid": "5c5c9791-5041-49fb-9dea-2bf7c6fa187c",
              "parentUUID": "d7c1dbae-4d9e-48da-9ef3-111a60d0adbc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ec95fd89-b372-4bde-9514-00eedd2b5661",
            "03a74d6a-7026-41db-af7c-043340c3e27c",
            "19491d12-355e-4a82-9c35-a169e28bdeb3",
            "ced6de95-8325-4d8f-8239-f7b2fb694775",
            "d9331eb8-a273-4ff0-9610-68ec14a6101d",
            "be865d45-d005-4f50-8843-40dc0bb08444",
            "f3539fc4-b814-40b3-8301-bcf0e22a9f86",
            "4b947db1-ffe5-4545-8e0b-53f15b9c5491",
            "7f2d28ea-5284-4a1b-82ea-aaa218604828",
            "539162ec-c9cc-4451-922c-ff8aa1615402",
            "41a5d40c-a7c1-4503-9aaa-d133ea4d324f",
            "5bc132d3-4f66-412c-aceb-a33945c079da",
            "2631c2f9-33b0-4df9-b8fc-303da9e62976",
            "bf82e874-9186-4d1f-a78b-2335510224b7",
            "d6691f94-b032-4ab8-8e1a-917ccd5a29e8",
            "3b3370aa-0ae5-436e-82e6-9c38b35cffc6",
            "fba89636-5233-4bde-8ecb-0f0fc74f0603",
            "7c1e3031-ee42-462a-bb14-f17751ee8007",
            "af94a389-c8fe-49f5-bc2a-c83d12d40255",
            "fa33e890-d987-48e1-836e-a413c21b0026",
            "0281b877-e55b-4019-8b93-4e1ccdd55df5",
            "cefddc35-8142-4fdb-abb0-996b8993cdd8",
            "d114b7fa-78ef-4469-b328-04e47bf90024",
            "7cc44533-4f0d-4df7-9a95-9f80137d66d5",
            "ae7b2175-0305-4162-a08b-e49e885d2168",
            "98d3194b-9771-4ac6-986a-bf5a96bb27fa",
            "53be9258-12fa-4ea6-ad95-5e68344dba02",
            "515aaf45-330a-4c66-bbb5-d15e3c8f11d7",
            "a9109b71-8ff8-4f0d-a66c-3edb34fbc46a",
            "b25b2b0f-1e03-4bbc-893a-1f39f54e4ea0",
            "00193976-627d-4623-aa1d-68e39fa97a99",
            "83eaa53b-486e-4758-b420-8020de81f06c",
            "3264d20c-3478-4b39-b17f-c3d114ec4456",
            "bbc8cfa0-d4d0-4186-b67f-6d2179fe5787",
            "3b04983e-7b53-4e90-91cd-ad8559e11087",
            "4e7e8aef-6880-489e-82a0-a1bbfe628e92",
            "b2054dc8-36a1-4091-9906-841d43fe7928",
            "89202fa4-9b06-4d5d-b7ff-82a884647004",
            "901160d4-4865-4df3-a21b-79b7dc1bff41",
            "9571230f-59fc-4b06-820b-f9192415ad73"
          ],
          "failures": [
            "e7c756c7-91a9-492b-b17f-ba606d0c4ce7",
            "78514f09-5dcb-4691-a6bc-8ebf1c34fdb7",
            "9ea7d8a6-216b-4b8c-991a-9ac167375f31",
            "e1d9162a-fe8a-431e-80df-407f0935a199",
            "ab740db3-76bb-4c16-898e-73e7a22c45eb",
            "1cc5443d-cee9-40c4-a830-672dbfb36e1b",
            "51b81561-caba-4f56-84c4-97b1c948601b",
            "2e71879d-43cd-47ee-be38-b2cc60e512b5",
            "63ecfb54-f381-4ee1-bf11-bb2104cf76e7",
            "d28666e3-ca5c-4ea1-98f6-84052001d521",
            "f5b480f1-38c5-4558-b5e9-9b33ecd0af9a",
            "83c9be9e-f787-42fa-8dbd-c2357351b26a",
            "4c49469f-c113-4e64-9c54-768427c195df",
            "015cff24-61b0-49ab-a60c-e70fabc287d3",
            "af6084ad-26bb-4034-82fd-f2df28b526c5",
            "71ff1c09-db9c-4903-ad6f-70cb7efbfaed",
            "ac089aa4-cdb8-4269-8c50-0efb58ce4cd0",
            "07e91ddd-3e16-4d6a-b265-77871bbf7cef",
            "ab25dd3d-a77d-441d-9b5e-1e81f6fa337e",
            "3dbdd6d3-0bca-43bb-9dd8-e17424e4dc84",
            "a29fe426-1dcd-43af-a2bc-fcde8e724c4d",
            "499a1624-a9b3-4f6f-b86f-3098a2481223",
            "345c8421-a6eb-4f54-b41c-da413e036ab5",
            "762a0618-4b37-4c78-90d9-eff9a403077f",
            "f6013ef3-b668-48a9-90f5-e6ca89dfbe81",
            "28dd3347-992a-47ec-bcae-8e89eb826b1e",
            "406d9295-45cf-46b4-bbd8-d9192d56f8a7",
            "430a2e33-3f17-40e1-b8fb-156e9b706bd8",
            "97f8fa2a-c40c-4b9c-aeb7-9d1b39dfd7f4",
            "e6aeb6d6-3611-4628-842f-c760f1c8a29e",
            "83e313a9-4f42-4f97-aa12-742d40ccbdd0",
            "6e3081dc-434a-4fc4-81b8-307bcdce9ee5",
            "e945df2a-4162-4ac6-bb22-efc3ee3f580c",
            "4c85a4e0-16ba-4452-b87e-00659c841a80",
            "57195c5a-3a33-4a5b-a963-7ef2e2a97a55",
            "40376571-71a8-4ed6-ae49-ba7f788578eb",
            "7260e935-9b9d-4f14-8802-f324f09c151f",
            "1d9590cb-caf0-4b83-b0d7-e519a06cf6cb",
            "fc4e1215-ffaf-495b-b6ac-053a0c3cc911",
            "fe1ce2ef-664b-41c8-8c83-62bf741b151a",
            "8b4d05e0-6ac1-4238-9ca0-380473651273",
            "7cd3c796-67e2-4f42-863c-06fad5353617",
            "19b163e9-3286-42cc-a699-333dd774de28",
            "ca02ae18-37fa-4046-9cef-1f94375f35a6",
            "0427e89b-b729-4feb-9d0d-130133672c39",
            "b400cb2a-b714-40e0-9c24-593e74e46d31",
            "b352e62c-73a3-4cb8-a36b-00bde790b2ae",
            "20c55b87-8b9d-4aa2-9a62-c5a5e5df6c51",
            "63e71088-352f-4d7a-9ce9-7a8af50ca5a0",
            "e7101fb8-a7a0-47e4-96d1-325e1e2c6cad",
            "18193c7c-b244-46c4-80e7-8b71a5f65381",
            "748ad14c-1825-4a15-93fc-b633d0920b29",
            "0c2249a6-0a3a-4f80-8f7a-b156927ba2a1",
            "3532d15c-eb99-47ca-b87b-e2cbb234971d",
            "9941076d-0c28-4e6a-855e-cf4c3a8701ef",
            "12215c9c-2678-4805-9a56-dc7ea02f74f7",
            "b229b036-d173-446a-8185-57f00d336461",
            "7514105c-6e6d-4315-a182-51151887f1a7",
            "942ba789-d3b5-4adc-966e-ac47cb45d781",
            "07853d0d-e5e9-4b57-a512-5f8420da49b4",
            "dd095e7d-09fa-4b4d-9f4d-ebf8d16b79b5",
            "67298594-1b16-4f6d-8def-3e1b254f9c5b",
            "dc074ec2-d79a-43ef-9a3a-6cbdf624f398",
            "07775d70-7677-47c3-a64d-5e007f0c1ff3",
            "5489acaf-77a5-444b-9057-06dacb10748c",
            "916e3971-0442-4c89-a40b-38e6f43afcc4",
            "15348012-a6a1-43e4-84ad-d62820785d4c",
            "1a2e13de-9b67-423c-9022-c5bc7ea569d7",
            "62801083-b8a3-48a9-83d8-2cf129d4bb5a",
            "9912cf82-5f56-4f36-a0be-b696bf15eb2e",
            "ff6db0fc-16b4-4c1d-a61a-5bb6ea491786",
            "91df5283-38e8-40d2-97f9-3dde22f9d504",
            "14f71afe-4e9d-4b02-a773-dfb9cba134af",
            "7823842a-6cc4-428d-9851-2efd06bed69c",
            "6786d5f9-6241-4e17-90de-cb716d965e9c",
            "ce9385bc-4e7d-4a25-8123-6644b66d082d",
            "e65b7b32-e982-4566-8381-0ccac6345115",
            "84f2f7dc-54d9-4fbe-abc0-32ab435c6e8b",
            "c044b6f4-533e-4f8c-b461-fdb8a10620be",
            "4feb2913-48af-4899-91e5-4794e485b8d1",
            "a7e64164-7b75-4925-b4ed-c767bca8ad06",
            "d73d19d1-e961-4345-a4e4-a277407f5b45",
            "cddfa9a2-7220-49b6-99d9-4b4c97735432",
            "24c381ed-1e8c-4c2e-8f9a-1526ebaf5dd7",
            "1afebc27-5103-4ed8-8f44-fccdd3f4611d",
            "b08a2e34-3499-43e1-807b-df25d885e751",
            "d3e3f5d5-20df-4a2f-985d-8cde8585e3ab",
            "c4a33284-1092-4bc1-9a54-066a34095e41",
            "38054e57-91b1-4125-86d4-718915605fe8",
            "959002b7-38f2-4330-9783-54b206b55bc1",
            "258bcd32-3250-480f-98fe-2ad8b0018058",
            "891d8c57-a248-4b37-af65-bff134822ed5",
            "0ee17c74-0b62-4cb2-b20f-b240dff7c403",
            "8dd1092e-2d95-4519-aebd-652557bacfbc",
            "4e47b6e0-10b0-407a-86aa-f9cd3ef1b491",
            "7d123942-58e6-4bfb-8606-cfbe05b6ceda",
            "f8f58b36-9d12-4693-93dd-584514846a54",
            "b38f31fd-823c-4ed5-808b-e69369486bd3",
            "9e45814e-3f10-4d73-a3a7-74c1a1e83423",
            "3d8bd803-3979-4dcf-8a59-d319ea019199",
            "bd6ab7ba-ce79-49bd-b3df-0b3e8605fde4",
            "df25fd83-1887-4e42-9e28-8869f5f57503",
            "82346b5b-689f-493c-9361-57a018d647b3",
            "3ac2449f-7f89-4bd1-8824-5b150fbd37af",
            "b8885f16-9881-4034-8e9e-1a8056ee40c8",
            "a40d9b0c-29d7-432b-a380-e3bb3cd72acf",
            "5dc366a0-2173-460f-ba15-f9307c50a1b2",
            "486fce9a-897d-4b75-8c14-581dc41f4abd",
            "3695080f-71b2-42ca-aab7-e4a85bfb0121",
            "0633139d-0115-4f96-8d4e-f2c088b91a26",
            "5061a814-403b-4150-8932-814e9d0c5e75",
            "a6a57b52-3c9c-4352-b894-68b9f16f7124",
            "a91524ca-004f-407c-93ce-6943f22ab9ae",
            "3887b2e1-5ee7-451f-b74b-5c6a7d42ca6d",
            "8949b3b3-d6c5-4dd7-9c38-7592f27e6f2f",
            "c6d1b328-94f4-41ba-a8e0-bdf0bf2f9687",
            "720c5e07-91d1-45d0-9832-39b39bb45613",
            "28ee88e7-28dd-4634-9c65-aae6a5e7beed",
            "daa8f9d1-9206-42c2-a017-eb11119b6990",
            "2bb66236-a55c-4dbd-aeee-74e28406cc93",
            "4e83d396-ffcd-4dbb-9c22-111ca139e6ad",
            "38102119-f0a2-45fb-a889-eb0420017ca1",
            "9a1c6a91-0f9e-4731-8aa5-eaf2d169b664",
            "adf0761f-7dd7-458e-bd28-eeefe273abb5",
            "636ec4d8-2bee-4977-9cec-0f02cb2a8aff",
            "fb4f3878-8e35-4cea-b2bb-9883e374fe1b",
            "9b7d53f8-a554-406e-bfe4-94a61a417ba0",
            "fc30b4c1-d08d-44c3-9f44-47759f1b384d",
            "463a6258-b12f-4a25-9b2c-4c8956ef8ddb",
            "3e02c93d-23df-43c6-a9c0-fc8732a775e1",
            "9e2d1de0-f818-4919-b149-aed526e4ad5d",
            "54b57b88-47c9-4b7d-8f63-63974b6da770",
            "a00a9ff3-0d5a-4b3a-96d8-8b34cc95c670",
            "ff2b8be8-f55f-42e9-9b5d-1056920f195b",
            "cb694e3a-6362-4d1e-810b-d6bbe6b1fda5",
            "7effeec3-9ac3-40a5-8ace-331a8ea300ba",
            "63c49c89-2549-4fc2-84d1-80df25174afd",
            "9ae5a410-42dc-4e68-b35c-c39848e04d22",
            "f07bbee2-7042-4c60-87b2-5a4c714ea770",
            "08a50b2a-d8b1-4097-b636-c74996253778",
            "1463d7eb-5faa-4761-bea9-d11a277adc26",
            "2dd5673f-a465-44f8-a951-3e52846c9271",
            "3f5d4525-142e-4eed-880c-28612abed66c",
            "b0448f18-227d-4e18-b1a2-f7fd5a1b56d3",
            "db82a524-cfd8-45f6-bd5e-c5cdf416a8ee",
            "f69fc22c-c742-427e-a0a7-5b00826eb5c3",
            "9d6e891e-7435-4b03-b79d-fed7a8f45ad4",
            "75483e77-8436-4f0e-aa1a-4d109ea6edd4",
            "9e3a8558-4d1e-43a8-82c3-bcbe93a95c47",
            "6a3f5c22-9964-4eff-990f-e0a2785a38eb",
            "7e92396b-ff25-45f8-be8f-e2923bacf9d5",
            "0131d7b1-7fe7-40fb-b5d8-a257cd496edc",
            "2f6cdc99-e1d3-439a-bc5d-185bae470350",
            "cad11d76-9283-4068-baea-e96b678ce738",
            "9b861ba3-072d-4a13-9033-811f7793f3f2",
            "035c3f12-d84a-44e6-9be0-69a859b6f5e5",
            "7e449f61-f251-4b6f-a647-50feaced4748",
            "aa4efa01-182e-4c58-af6e-d0ae93d641fb",
            "ac900537-4025-4811-9f72-160113f91a9d",
            "15e61a63-4014-44cb-b93c-983186d781ab",
            "ef62f65a-517f-41a2-bb6b-c2510d00c258",
            "a19b21b8-aab4-45b0-9d59-e415a5760145",
            "b757d82c-c5de-40db-adfb-8edb1a202f1d",
            "1c9cf8a8-53da-4f89-8364-acb0191c48d7",
            "04165b89-6db3-4782-ad34-9929f32660df",
            "31b75c53-35c2-4c64-a8cc-fa9227bf1486",
            "c8b9ea1c-2877-49cf-9289-e652c3dad10b",
            "9a0c3bb2-5e2b-40ef-88a2-2370507303ff",
            "852d5d3e-97be-4dbd-992c-ca4092248425",
            "cb622e29-e51f-4b39-bd0e-75502f35a86f",
            "daf7e4ff-7899-416d-b5fc-0076ce30d4fb",
            "48b2d667-0e3f-4f1b-8ace-0ad6cb986d72",
            "da17deb4-b04e-4c70-a5b6-4886a41937c9",
            "2778a520-2a2c-42a6-b667-a778a5604c5e",
            "dc34a2bf-0251-4750-8c78-f9129da456b0",
            "95fc03b6-e981-4ac6-b613-e9a39a5c1f1d",
            "25bcd034-6241-4902-979c-12a0d3729ae2",
            "d1e838d1-7453-4f11-9824-27a62036046d",
            "cb1fa688-524c-4c0d-a60d-ecdc4f7d9fbf",
            "d77f4c16-ac36-4e3e-9492-f12bf91e0500",
            "672f1232-f30f-4bff-a3cd-d385df1eb383",
            "df4ae534-9459-43fb-9d4d-1cc18b8c8e87",
            "bb218f22-977f-4804-a3b7-e59b8293b658",
            "dc6b1102-7380-41b2-ae41-d9df9aad2336",
            "c33c5f12-9fb0-4ee8-8129-08abe10eef06",
            "c247fd00-9821-4158-8f01-b30959ed4f75",
            "a267659e-cdd1-49ba-be5f-4dad76a2eb36",
            "9420fc9f-d172-4208-8c28-09349601ad84",
            "5b8d2996-efe1-49a2-b3a0-d5dc3505c488",
            "b7a9a95a-17c0-41fd-94ce-97a84e47e490",
            "9fc3f101-b326-469e-8192-bf81f7a275d4",
            "319cdab4-41ad-4a14-ab1b-a1e7e96debf4",
            "0e37552d-5f1f-4ac8-b293-9d382bc69c05",
            "e7c9a201-2e5b-4167-b5e3-7157100c6168",
            "0efd2ee3-280e-48d0-8560-5790fe55a0ab",
            "31dca22e-a431-46aa-8f92-3714a0ec7205",
            "d9410914-cb9a-4fd0-afac-49f51093a419",
            "5f203506-3a32-48d8-9206-2c1474e8efcc",
            "e9756865-c0ac-4838-95d8-a9fd2880ffbc",
            "3111f96f-2158-44b8-a3df-f9acf67853de",
            "c4349945-042f-4617-b55c-97c9e898dec0",
            "0c0c64a9-7405-45f9-97b1-d56b2ef894f6",
            "dba734d6-c191-4335-8032-fafa1ccfb537",
            "5102dcdc-9cfc-48fd-813e-2c15b2171c84",
            "8b77223a-b8b5-4820-88bc-ef339b0dafa1",
            "616ed0a8-ea24-4134-a714-ac91eb21d280",
            "ab629977-1e7e-4fcc-8a60-0652d1c9a080",
            "95818d1e-0a7e-45a2-95c6-8dfa1789faac",
            "7d1156d5-d93c-47e8-af97-18d9f3a07e3c",
            "515c8909-4807-4184-afb5-90015e7e9357",
            "0c475043-7ee4-4b8d-a307-960878b231c5",
            "2ac01202-0c7e-4db3-a4f3-f96900008166",
            "b33c2f93-334d-4dc8-aba2-9d1c403266e1",
            "6859787b-73e0-4edf-aefd-d758f7e16a54",
            "456dbe16-c953-4e71-9705-5478e10e052c",
            "6ce83cf2-0d44-441a-af3f-2f94566c54f1",
            "8ac067c2-dd63-4bdd-8ce4-047a68327c08",
            "cb9d5926-1fd7-4f20-a8d7-193f3711b92c",
            "4b4b8591-0ec1-46a7-818c-d0e7738fad5e",
            "7944a17f-f9a2-437a-b375-d89a3e9ba4bc",
            "b00eaa96-ad8f-4cb1-af25-81fbd5556f02",
            "5900188f-cd18-4184-aa1a-6e3a36fa9b65",
            "55c40e73-5323-4ad6-a3c9-50243cfc4c77",
            "193ef4e9-029e-4939-b81e-533854f9c456",
            "2a9dce72-daee-4bf1-b225-c66d79d06e88",
            "1d0aab52-cad1-43b6-8cf6-d169540afd71",
            "47d9f395-9be4-4595-b87a-7ad6dac9f691",
            "8b451ce6-754a-4d09-91fd-9dac36766458",
            "de1ab305-295e-4b68-9a15-1a2d8235dd14",
            "33ad7a44-c222-4258-a711-59082e2524dd",
            "f56576e6-2f71-4853-872e-08a37122b495",
            "3c7edbce-a02e-488b-ac34-e9a7c2da44ea",
            "384d6b88-fdee-4724-95f6-404e99341e86",
            "32d2317b-ce7d-4dd4-9854-22540f5a262c",
            "351e8c23-cf7a-4950-8028-e92996744848",
            "0055ae8b-2ff5-4ab1-8d2f-911690542679",
            "60fcc258-9bc3-4ce7-af74-e50fb36dda95",
            "8e6859bf-bca2-4965-a405-f3ffda761b93",
            "b2f25f6c-590a-4b3b-b497-38c2904ec01b",
            "22301572-cd55-4300-9f21-8b9328448564",
            "2356a208-6f7f-462d-a45e-9228432a1b97",
            "dbccee3a-cb2a-44f5-aedf-28e5cbc90008",
            "f0f91915-9223-4420-a1a9-a672ccbe65b8",
            "d1ded24e-e31d-42f2-860a-8bf8f43d330d",
            "d938a403-ec47-42d4-b0ab-1b7f5bf03f19",
            "ad927cc0-3ec5-4e82-9780-d240120ae76d",
            "6cdd5d63-35f9-44e2-996a-7dab35d64d70",
            "450b4ccc-5c51-4bd3-8806-e27ab2d8635f",
            "c1eb8d98-fc13-4755-bfe7-cf1aa50397f4",
            "183caf07-0779-4e3d-8468-4a13f192cc9e",
            "f4a15125-b0f3-4fa3-8777-8ee4a3a064fb",
            "5c5c9791-5041-49fb-9dea-2bf7c6fa187c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 274340,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}